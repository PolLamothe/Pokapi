{
  "openapi": "3.0.0",
  "info": {
    "title": "Pokapi-proxy API Documentation",
    "description": "API complète pour la gestion des cartes Pokémon et des utilisateurs",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://172.21.45.43:8080/api/v0",
      "description": "Proxy API hébergé sur le réseau de l'IUT de Nantes nécessite un VPN."
    },
    {
      "url": "http://localhost:8080/api/v0",
      "description": "Serveur local de développement."
    }
  ],
  "tags": [
    {
      "name": "Data",
      "description": "Opérations relatives aux données des cartes Pokémon"
    },
    {
      "name": "User",
      "description": "Opérations relatives aux utilisateurs"
    }
  ],
  "paths": {
    "/data/open-booster/{setId}": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Ouvrir un booster",
        "description": "Permet d'ouvrir un paquet de 5 cartes aléatoire à partir d'une série (set).",
        "parameters": [
          {
            "name": "setId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Id du set à ouvrir"
          }
        ],
        "responses": {
          "200": {
            "description": "Un tableau avec la liste des cartes obtenues"
          },
          "404": {
            "description": "Aucun set avec cet id trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/data/card/{id}": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Récupérer les informations d'une carte",
        "description": "Permet de consulter les informations détaillées d'une carte.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Id de la carte"
          }
        ],
        "responses": {
          "200": {
            "description": "La carte recherchée"
          },
          "404": {
            "description": "Aucune carte avec cet id trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/data/cards": {
      "post": {
        "tags": [
          "Data"
        ],
        "summary": "Récupérer les informations de plusieurs cartes",
        "description": "Permet de consulter les informations détaillées de plusieurs cartes.",
        "responses": {
          "200": {
            "description": "Un tableau avec les cartes recherchées"
          }
        },
        "requestBody": {
          "in": "body",
          "description": "Renseigner la liste des id des cartes",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListString"
              }
            }
          }
        }
      }
    },
    "/data/card/evolution/{id}": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Récupérer toutes les évolutions possibles d'une carte dans le même set",
        "description": "Permet de trouver toutes les évolutions possibles d'une carte dans le même set.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Id de la carte"
          }
        ],
        "responses": {
          "200": {
            "description": "Un tableau avec les cartes des évolutions disponibles"
          },
          "400": {
            "description": "Cette carte n'a pas d'évolution possible dans ce set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Aucune carte avec cet id trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/data/set/cards/{setId}": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Récupérer toutes les cartes d'un set",
        "description": "Permet de récupérer la liste des cartes appartenant à un set en particulier.",
        "parameters": [
          {
            "name": "setId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Id du set à consulter"
          }
        ],
        "responses": {
          "200": {
            "description": "La liste des cartes de ce set"
          },
          "404": {
            "description": "Aucune set avec cet id trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/data/set/presentation/{setId}": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Récupérer les informations d'un set et 3 images de cartes de celui-ci",
        "description": "Permet de récupérer la présentation d'un set. Celle-ci contiendra les informations du set et 4 images de cartes composant ce set.",
        "parameters": [
          {
            "name": "setId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Id du set à consulter"
          }
        ],
        "responses": {
          "200": {
            "description": "Les informations du set et 4 images de cartes composant ce set."
          },
          "404": {
            "description": "Aucune set avec cet id trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/data/set/{setId}": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Récupérer les informations d'un set",
        "description": "Permet de consulter les informations d'un en particulier.",
        "parameters": [
          {
            "name": "setId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Id du set à consulter"
          }
        ],
        "responses": {
          "200": {
            "description": "Les informations du set"
          },
          "404": {
            "description": "Aucune set avec cet id trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/data/sets": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Récupérer tous les sets",
        "description": "Permet de récupérer la liste de tous les sets disponibles.",
        "responses": {
          "200": {
            "description": "La liste de tous les sets."
          },
          "503": {
            "description": "Service Unavailable",
            "$ref": "#/components/responses/DataAPIError"
          }
        }
      }
    },
    "/data/deck-price": {
      "post": {
        "tags": [
          "Data"
        ],
        "summary": "Donne le prix d'un deck de cartes",
        "description": "Permet de savoir le prix total d'une liste de cartes (deck).",
        "responses": {
          "200": {
            "description": "Le prix total."
          },
          "404": {
            "description": "Une des cartes n'a pas été trouvée",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "requestBody": {
          "in": "body",
          "description": "Renseigner la liste des id des cartes",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Deck"
              }
            }
          }
        }
      }
    },
    "/data/types": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Récupérer tous les types",
        "description": "Permet de récupérer la liste des types disponibles.",
        "responses": {
          "200": {
            "description": "Un tableau avec la liste des types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListString"
                }
              }
            }
          }
        }
      }
    },
    "/data/rarities": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Récupérer toutes les raretés",
        "description": "Permet de récupérer la liste des raretés disponibles.",
        "responses": {
          "200": {
            "description": "Un tableau avec la liste des raretés",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListString"
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Se connecter à partir des identifiants ou d'un token",
        "description": "Permet à un utilisateur de se connecter en utilisant soit un jeton d'authentification, soit son identifiant et mot de passe si les deux sont fournis alors la vérification se fait avec les identifiants.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/NewToken"
          },
          "401": {
            "description": "Jeton ou identifiants invalides",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "in": "body",
          "description": "Renseigner ses informations de connexion",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        }
      }
    },
    "/user/register": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Inscrire un nouvel utilisateur",
        "description": "Permet à un utilisateur de s'inscrire avec un login, un pseudo et un mot de passe. Le login doit être unique.",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/NewToken"
          },
          "400": {
            "description": "Un utilisateur avec ce login existe déjà",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "requestBody": {
          "in": "body",
          "description": "Renseigner ses informations de pour la création du compte",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            }
          }
        }
      }
    },
    "/user/my-cards": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Récupérer toutes les cartes de la collection de l'utilisateur",
        "description": "Permet à un utilisateur de récupérer la liste des cartes qu'il possède avec la quantité de chaque carte.",
        "responses": {
          "200": {
            "description": "Un tableau avec les cartes de l'utilisateur et leurs quantités"
          },
          "401": {
            "description": "Unauthorized",
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "503": {
            "description": "Service Unavailable",
            "$ref": "#/components/responses/UserAPIError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/my-cards/{cardId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Récupérer une carte de la collection de l'utilisateur",
        "description": "Permet à l'utilisateur de récupérer une carte spécifique de sa collection pour voir les informations de la carte ainsi que la quantité possédée.",
        "parameters": [
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "La carte de l'utilisateur avec la quantité possédée"
          },
          "400": {
            "description": "L'utilisateur n'a pas de carte avec cet id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "503": {
            "description": "Service Unavailable",
            "$ref": "#/components/responses/UserAPIError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/pseudo/{pseudo}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Trouver un utilisateur à partir de son pseudo",
        "description": "Rechercher des utilisateur à partir de leur pseudo, renvoie tous les utilisateurs dont le pseudo commence par la chaîne donnée.",
        "parameters": [
          {
            "name": "pseudo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Le début du pseudo a rechercher"
          }
        ],
        "responses": {
          "200": {
            "description": "Les informations des utilisateurs trouvés",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUserInfo"
                }
              }
            }
          }
        }
      }
    },
    "/user/open-booster/{setId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Ouvrir un booster pour ajouter des cartes dans la collection",
        "description": "Permet à l'utilisateur d'ouvrir un paquet de 5 cartes aléatoire à partir d'une série (set). Les cartes obtenues sont alors ajoutées à sa collection.",
        "parameters": [
          {
            "name": "setId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Un tableau avec les 5 cartes obtenues"
          },
          "401": {
            "description": "Unauthorized",
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Aucun set avec cet id trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "$ref": "#/components/responses/UserAPIError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/info": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Récupérer son login et pseudo",
        "description": "Permet à un utilisateur de voir les informations de son compte, c'est-à-dire son login et son pseudo.",
        "responses": {
          "200": {
            "description": "Les informations de l'utilisateur",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/update": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Mettre à jour son pseudo et mot de passe",
        "description": "Permet à un utilisateur de modifier son pseudo et/ou son mot de passe.",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/NewToken"
          },
          "400": {
            "description": "Le nouveau pseudo ou mot de passe est invalide",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "in": "body",
          "description": "Renseigner le nouveau pseudo ou mot de passe",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update"
              }
            }
          }
        }
      }
    },
    "/user/delete": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Supprimer l'utilisateur",
        "description": "Permet à un utilisateur de supprimer son compte.",
        "responses": {
          "200": {
            "description": "L'utilisateur a été supprimé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDeleted"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "L'utilisateur n'a pas été trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/searched": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Récupérer toutes les cartes marquées comme recherchées d'un utilisateur",
        "description": "Voir la les ID des cartes qui sont dans la liste des cartes recherchées par l'utilisateur",
        "responses": {
          "200": {
            "description": "La liste des ID des cartes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListId"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/searched/add": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Ajouter une carte dans la liste des cartes recherchées",
        "description": "Permet à un utilisateur d'ajouter une carte à la liste des cartes qu'il recherche.",
        "responses": {
          "200": {
            "description": "La carte a été ajoutée"
          },
          "400": {
            "description": "L'utilisateur n'a pas spécifié d'id ou la carte est déjà dans la liste",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "in": "body",
          "description": "ID de la carte à ajouter à la liste",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardId"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Login": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "example": "johnDoe"
          },
          "password": {
            "type": "string",
            "example": "pswd1234"
          }
        },
        "required": [
          "login",
          "password"
        ]
      },
      "Register": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "example": "johnDoe"
          },
          "pseudo": {
            "type": "string",
            "example": "John Doe"
          },
          "password": {
            "type": "string",
            "example": "pswd1234"
          }
        },
        "required": [
          "login",
          "pseudo",
          "password"
        ]
      },
      "Update": {
        "type": "object",
        "properties": {
          "pseudo": {
            "type": "string",
            "example": "John Doe"
          },
          "password": {
            "type": "string",
            "example": "pswd1234"
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "example": "johnDoe"
          },
          "pseudo": {
            "type": "string",
            "example": "John Doe"
          }
        },
        "required": [
          "login",
          "pseudo"
        ]
      },
      "Token": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "valid.jwt.token"
          }
        },
        "required": [
          "token"
        ]
      },
      "UserDeleted": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User deleted"
          }
        },
        "required": [
          "message"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "error message"
          }
        },
        "required": [
          "message"
        ]
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Unauthorized : invalid or missing authentication token"
          }
        },
        "required": [
          "message"
        ]
      },
      "Card": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "xy1-1"
          },
          "quantity": {
            "type": "number",
            "example": 3
          }
        },
        "required": [
          "id",
          "quantity"
        ]
      },
      "CardId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "xy1-1"
          }
        },
        "required": [
          "id"
        ]
      },
      "ListUserInfo": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": "5"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string",
                  "example": "johnDoe"
                },
                "pseudo": {
                  "type": "string",
                  "example": "John Doe"
                }
              }
            }
          }
        }
      },
      "ListString": {
        "type": "array",
        "items": {
          "type": "string",
          "example": "fire"
        }
      },
      "Deck": {
        "type": "object",
        "properties": {
          "deck": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "xy1-1"
            }
          }
        }
      },
      "ListId": {
        "type": "array",
        "items": {
          "type": "string",
          "example": "xy1-1"
        }
      }
    },
    "responses": {
      "UnauthorizedResponse": {
        "description": "Accès refusé",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnauthorizedError"
            }
          }
        }
      },
      "NewToken": {
        "description": "Jeton d'authentification actualisé",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Token"
            }
          }
        }
      },
      "DataAPIError": {
        "description": "Une erreur est survenue avec l'API externe api.pokemontcg.io",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UserAPIError": {
        "description": "Une erreur est survenue avec l'API de gestion des cartes Pokapi-data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}